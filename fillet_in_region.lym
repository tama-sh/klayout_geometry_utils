<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Fillet Shapes in Boxes</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>edit_menu.my_group&gt;end("Geometry Utils").end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya
import numpy as np
from itertools import chain

### functions ###

def in_range(x, r):
    if isinstance(r, list):
        return any(map(lambda r_elt: in_range(x, r_elt), r))
    else:
        return (r[0] &lt;= x) and (x &lt;= r[1])


def det_mat(m):
    """
      m: pya.Matrix2d
      return: float
    """
    return (m.m11()*m.m22() - m.m12()*m.m21())

def dot_vec(p0, p1):
    """
      p0, p1: DPoint
    """
    return (p0.x*p1.x + p0.y*p1.y)

def norm_vec(p):
    """
      p: DPoint
    """
    return np.sqrt(p.x*p.x + p.y*p.y)

def vec_angle(v0, v1):
    """
      v0, v1: pya.DPoint
      return: float
    """
    m = pya.Matrix2d.new(v0.x, v0.y, v1.x, v1.y)
    return np.arctan2(det_mat(m), dot_vec(v0,v1))

def rot_vec(v, angle):
    """
      v: pya.DPoint
      angle: float
      return: pya.DPoint
    """
    mat = pya.Matrix2d.new(np.cos(angle), -np.sin(angle),
                           np.sin(angle), np.cos(angle))
    return mat.trans(v)

def fillet(ps, box=None, r=5, angle_range=[(-150, -30), (30, 150)], n_cir=20, layer=1):
    ps_new = []
    n = len(ps)

    idx_seek = 0
    idx_new_e = n
    idx = 0
    
    while(idx &lt; n):
        if not box or box.contains(ps[idx]):    
            v1 = (ps[idx] - ps[(idx-1)%n])
            v2 = (ps[(idx+1)%n] - ps[idx])

            angle = vec_angle(v1, v2)
            
            if in_range(angle*180.0/np.pi, angle_range):
                idx_s = (idx - 1)%n
                idx_e = (idx + 1)%n

                while (norm_vec(ps[idx] - ps[idx_s]) &lt;= r*np.tan(abs(angle)/2)) and (not (idx_s == idx)):
                    idx_s = (idx_s - 1)%n
                while (norm_vec(ps[idx] - ps[idx_e]) &lt;= r*np.tan(abs(angle)/2)) and (not (idx_e == idx)):
                    idx_e = (idx_e + 1)%n

                # skip invalid corner
                if (idx_s == idx) or (idx_e == idx):
                    idx += 1
                    continue

                v_s = ps[(idx_s+1)%n] - ps[idx_s]
                v_e = ps[idx_e] - ps[(idx_e-1)%n]
                angle_se = vec_angle(v_s, v_e)
                n_s = v_s*(1/norm_vec(v_s))
                n_e = v_e*(1/norm_vec(v_e))

                # find cross points
                # ps[idx_s] + a*n_s = ps[idx_e] - b*n_e
                # [n_s, n_e][a, b] = [(ps[idx_e]-ps[idx_s])]
                a = pya.Matrix2d(n_s.x, n_e.x, n_s.y, n_e.y).inverted().trans(ps[idx_e]-ps[idx_s])
                p_se = ps[idx_s] + n_s*a.x

                # find center
                v_c = n_e-n_s
                n_c = v_c*(1/norm_vec(v_c))

                p_c = p_se + n_c*(r/np.cos(abs(angle_se)/2))
                p_s = p_se - n_s*r*np.tan(abs(angle_se)/2)
                p_e = p_se + n_e*r*np.tan(abs(angle_se)/2)

                # recalc angle
                angle_rot = vec_angle(p_s-p_c, p_e-p_c)

                p_list = []
                for theta in np.linspace(0, angle_rot, num=n_cir):
                    p_rot = p_c + rot_vec(p_s - p_c, theta)
                    p_list.append(p_rot)

                # calc excluded point again
                while (norm_vec(p_se - ps[idx_s]) &lt;= r*np.tan(abs(angle_se)/2)) and (not (idx_s == idx)):
                     idx_s = (idx_s - 1)%n
                while (norm_vec(p_se - ps[idx_e]) &lt;= r*np.tan(abs(angle_se)/2)) and (not (idx_e == idx)):
                     idx_e = (idx_e + 1)%n

                if idx_s &gt; idx_e:
                    idx_new_e = (idx_s + 1)%n
                    ps_new.append(p_list)
                else:
                    ps_new.append(ps[idx_seek:idx_s+1])
                    ps_new.append(p_list)

                idx_seek = idx_e
                
                if (idx &gt; idx_s) and (idx &gt; idx_e): # rotate back to the beg of list
                    break
                else:
                    idx = idx_e-1 # subtract - 1 because +1 is added at the end
        idx += 1

    if not ps_new:  # no fillet
        ps_new = ps
        return None
    elif idx_seek &gt; idx_new_e:
        ps_new.append(ps[idx_seek:n])
        ps_new.append(ps[0:idx_new_e])
    else:
        ps_new.append(ps[idx_seek:idx_new_e])

    return list(chain.from_iterable(ps_new))


def round_selected_corner(cell, target_layer, box_layer, r, dbu):  
  # shapes
  for s_box in cell.each_shape(box_layer.layer_index(), pya.Shapes.SBoxes):
    box = s_box.dbox
    for s in cell.each_overlapping_shape(target_layer.layer_index(), box, pya.Shapes.SAll):
      ps = []
      
      if s.is_box():
        poly_box = pya.DSimplePolygon(s.dbox)
        for p in poly_box.each_point():
          ps.append(p)
      elif s.is_simple_polygon():
        for p in s.dsimple_polygon.each_point():
          ps.append(p)
      elif s.is_polygon():
        dspoly = s.polygon.to_simple_polygon().to_dtype(dbu)
        for p in dspoly.each_point():
          ps.append(p)
      else:
        continue

      #new_ps=ps
      new_ps = fillet(ps, box, r=r)

      if new_ps:
        s.delete()
        poly = pya.DSimplePolygon(new_ps)
        cell.shapes(target_layer.layer_index()).insert(poly)

### make dialog ###
class FilletDialog(pya.QDialog):
  def __init__(self, parent=None):
    app = pya.Application.instance()
    self.mw = app.main_window()
    self.lv = self.mw.current_view()
    cv = self.lv.active_cellview()
    self.cur_cell = cv.cell
    
    cur_layout = cv.layout()
    self.dbu = cur_layout.dbu
    
    self.layer_list = []
    layer_str_list = []
    
    for layer in self.lv.each_layer():
      self.layer_list.append(layer)
      if layer.name:
        layer_str_list.append(layer.name)
      else:
        layer_str_list.append("{0}/{1}".format(layer.source_layer, layer.source_datatype))

    layout = pya.QVBoxLayout.new(self)

    # layer list
    layer_sel_layout = pya.QFormLayout.new(self)

    t_lay_str = pya.QLabel.new("Target Layer:", self)
    self.t_lay_cbox = pya.QComboBox.new(self)
    self.t_lay_cbox.addItems(layer_str_list)
    layer_sel_layout.addRow(t_lay_str, self.t_lay_cbox)

    b_lay_str = pya.QLabel.new("Selecting Box Layer:", self)
    self.b_lay_cbox = pya.QComboBox.new(self)
    self.b_lay_cbox.addItems(layer_str_list)
    self.b_lay_cbox.setCurrentIndex(self.b_lay_cbox.count-1)
    layer_sel_layout.addRow(b_lay_str, self.b_lay_cbox)
    
    r_str = pya.QLabel.new("radius:", self)
    self.r_edit = pya.QLineEdit("10", self)
    r_validator = pya.QDoubleValidator(self)
    r_validator.setBottom(0)
    decimals = -int(np.floor(np.log10(self.dbu)))
    if decimals &lt; 0:
      r_validator.setDecimals(0)
    else:
      r_validator.setDecimals(decimals)
    self.r_edit.setValidator(r_validator)
    layer_sel_layout.addRow(r_str, self.r_edit) 

    layout.addLayout(layer_sel_layout)

    # ok and cancel
    yn_layout = pya.QHBoxLayout.new(self)
    ok_button = pya.QPushButton.new("OK", self)
    ok_button.clicked(lambda: self.exec_fillet_and_close())
    cancel_button = pya.QPushButton.new("Cancel", self)
    cancel_button.clicked(lambda: self.close())
    yn_layout.addWidget(ok_button)
    yn_layout.addWidget(cancel_button)
    layout.addLayout(yn_layout)

    # layout
    self.setLayout(layout)
    
  def exec_fillet(self):
    target_layer = self.layer_list[self.t_lay_cbox.currentIndex]
    box_layer = self.layer_list[self.b_lay_cbox.currentIndex]
    r = float(self.r_edit.text)
    
    # manager
    manager = self.mw.manager()
    # begin transaction
    manager.transaction("Round box-selected corner")
    round_selected_corner(self.cur_cell, target_layer, box_layer, r, self.dbu)
    manager.commit()
    
  def exec_fillet_and_close(self):
    self.exec_fillet()
    self.close()

dialog = FilletDialog()
dialog.exec_()
</text>
</klayout-macro>
